while wait(0.5) do
  local player = game:GetService("Players").LocalPlayer
  local scrollingFrame = player.PlayerGui.sellShop.Frame.innerFrame.rightSideFrame.ScrollingFrame
  local remoteEvent = game:GetService("ReplicatedStorage").remotes.sellItemEvent
  
  local matchingDescendants = {}
  
  -- Belirli nadirlikler için renk tanımlamaları
  local rarityColors = {
      Common = Color3.fromRGB(91, 194, 80),
      Uncommon = Color3.fromRGB(152, 152, 152),
      Rare = Color3.fromRGB(75, 77, 195),
      Epic = Color3.fromRGB(146, 70, 159),
  }
  
  -- Belirli eşya türleri ve nadirliklerini tanımlama
  local sellableItems = {
      ring = {rarityColors.Common, rarityColors.Uncommon, rarityColors.Rare, rarityColors.Epic},
      weapon = {rarityColors.Common, rarityColors.Uncommon, rarityColors.Rare, rarityColors.Epic},
      chest = {rarityColors.Common, rarityColors.Uncommon},
      helmet = {rarityColors.Common, rarityColors.Uncommon},
      ability = {rarityColors.Common, rarityColors.Uncommon, rarityColors.Rare, rarityColors.Epic} -- Ability için ekleme yapıldı
  }
  
  -- Belirtilen nadirlikteki eşya olup olmadığını kontrol etme
  local function isSellableItem(itemType, imageColor)
      local validRarities = sellableItems[itemType]
      for _, color in pairs(validRarities) do
          if imageColor == color then
              return true
          end
      end
      return false
  end
  
  -- Fonksiyon, belirli renklerle eşleşen çocukları bulma
  local function findMatchingDescendants(element)
      for _, descendant in pairs(element:GetDescendants()) do
          if descendant:IsA("GuiObject") then
              local itemType = descendant:FindFirstChild("itemType")
              if itemType then
                  local category = itemType.Value
                  if sellableItems[category] and isSellableItem(category, descendant.ImageColor3) then
                      table.insert(matchingDescendants, descendant)
                  end
              end
          end
      end
  end
  
  findMatchingDescendants(scrollingFrame)
  
  if #matchingDescendants > 0 then
      for _, descendant in pairs(matchingDescendants) do
          local itemType = descendant:FindFirstChild("itemType")
          local uniqueItemNum = itemType:FindFirstChild("uniqueItemNum")
          if itemType and uniqueItemNum then
              local category = itemType.Value
              local value = tonumber(uniqueItemNum.Value)
              if value then
                  local args = {
                      [1] = {
                          ["chest"] = {},
                          ["ability"] = {},
                          ["helmet"] = {},
                          ["ring"] = {},
                          ["weapon"] = {}
                      }
                  }
                  args[1][category] = {[1] = value}
                  remoteEvent:FireServer(unpack(args))
                  print("Sent remote for item", descendant.Name, "category:", category, "value:", value)
              else
                  print("uniqueItemNum Value property is not a number for item with id:", descendant.Name)
              end
          else
              print("itemType or uniqueItemNum not found for item with id:", descendant.Name)
          end
      end
  else
      print("Failed to find matching items")
  end
end
