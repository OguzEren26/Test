local maxLevel = 216

local dungeonLevels = {
  ["Desert Temple"] = {
      {level = 1, difficulty = "Easy"},
      {level = 5, difficulty = "Medium"}, 
      {level = 15, difficulty = "Hard"}
  },
  ["Winter Outpost"] = {
      {level = 30, difficulty = "Easy"},
      {level = 40, difficulty = "Medium"},
      {level = 50, difficulty = "Hard"}
  },
  ["Pirate Island"] = {
      {level = 60, difficulty = "Insane"},
      {level = 65, difficulty = "Nightmare"}
  },
  ["King's Castle"] = {
      {level = 70, difficulty = "Insane"},
      {level = 75, difficulty = "Nightmare"}
  },
  ["The Underworld"] = {
      {level = 80, difficulty = "Insane"},
      {level = 85, difficulty = "Nightmare"}
  },
  ["Samurai Palace"] = {
      {level = 90, difficulty = "Insane"},
      {level = 95, difficulty = "Nightmare"}
  },
  ["The Canals"] = {
      {level = 100, difficulty = "Insane"},
      {level = 105, difficulty = "Nightmare"}
  },
  ["Ghastly Harbor"] = {
      {level = 110, difficulty = "Insane"},
      {level = 115, difficulty = "Nightmare"}
  },
  ["Steampunk Sewers"] = {
      {level = 120, difficulty = "Insane"},
      {level = 125, difficulty = "Nightmare"}
  },
  ["Orbital Outpost"] = {
      {level = 135, difficulty = "Insane"},
      {level = 140, difficulty = "Nightmare"}
  },
  ["Volcanic Chambers"] = {
      {level = 150, difficulty = "Insane"},
      {level = 155, difficulty = "Nightmare"}
  },
  ["Aquatic Temple"] = {
      {level = 160, difficulty = "Insane"},
      {level = 165, difficulty = "Nightmare"}
  },
  ["Enchanted Forest"] = {
      {level = 170, difficulty = "Insane"},
      {level = 175, difficulty = "Nightmare"}
  },
  ["Northern Lands"] = {
      {level = 180, difficulty = "Insane"},
      {level = 185, difficulty = "Nightmare"}
  },
  ["Glided Skies"] = {
      {level = 190, difficulty = "Insane"},
      {level = 195, difficulty = "Nightmare"}
  },
  ["Yokai Peak"] = {
      {level = 200, difficulty = "Insane"},
      {level = 205, difficulty = "Nightmare"}
  },
  ["Abyssal Void"] = {
      {level = 210, difficulty = "Insane"},
      {level = 215, difficulty = "Nightmare"}
  }
}

repeat wait() until game:IsLoaded()
wait()

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local desiredPlaceID = 2414851778
local saveFolder = "kisave"

if not isfolder(saveFolder) then
   makefolder(saveFolder)
end

local function saveCurrentLevel(level)
   writefile(saveFolder .. "/current_level.txt", tostring(level))
end

local function getSavedLevel()
   if isfile(saveFolder .. "/current_level.txt") then
       return tonumber(readfile(saveFolder .. "/current_level.txt"))
   end
   error("Script stopped")
end

local function saveCurrentDungeon(dungeon)
   writefile(saveFolder .. "/current_dungeon.txt", dungeon)
end

local function getSavedDungeon()
   if isfile(saveFolder .. "/current_dungeon.txt") then
       return readfile(saveFolder .. "/current_dungeon.txt")
   end
   error("Script stopped")
end

local function saveCurrentDifficulty(difficulty)
   writefile(saveFolder .. "/current_difficulty.txt", difficulty)
end

local function getSavedDifficulty()
   if isfile(saveFolder .. "/current_difficulty.txt") then
       return readfile(saveFolder .. "/current_difficulty.txt")
   end
   error("Script stopped")
end

local function getCurrentLevel()
   repeat wait() until player:FindFirstChild("leaderstats")
   local leaderstats = player.leaderstats
   local levelValue = leaderstats:WaitForChild("Level")
   
   if not levelValue then
       error("Script stopped")
   end
   
   return levelValue.Value
end

local function getDungeonAndDifficultyForLevel(currentLevel)
   if not currentLevel then
       error("Script stopped")
   end
   
   if currentLevel >= maxLevel then
       player:Kick("Max level reached")
       return
   end
   
   local bestDungeon = nil
   local bestDifficulty = nil
   local smallestDiff = math.huge
   
   for dungeonName, difficulties in pairs(dungeonLevels) do
       for _, difficultyData in ipairs(difficulties) do
           if currentLevel >= difficultyData.level then
               local levelDiff = currentLevel - difficultyData.level
               if levelDiff < smallestDiff then
                   smallestDiff = levelDiff
                   bestDungeon = dungeonName
                   bestDifficulty = difficultyData.difficulty
               end
           end
       end
   end
   
   if bestDungeon and bestDifficulty then
       return bestDungeon, bestDifficulty
   end
   
   error("Script stopped")
end

local function shouldTeleportToLobby(currentLevel, currentDungeon, currentDifficulty)
   if not currentDungeon or not currentDifficulty then
       error("Script stopped")
   end
   
   local savedDungeon = getSavedDungeon()
   local savedDifficulty = getSavedDifficulty()
   
   if savedDungeon ~= currentDungeon or savedDifficulty ~= currentDifficulty then
       saveCurrentDungeon(currentDungeon)
       saveCurrentDifficulty(currentDifficulty)
       return true
   end
   return false
end

local function createDungeon(dungeon, difficulty)
   if not dungeon or not difficulty then
       error("Script stopped")
   end
   
   local args = {
       [1] = dungeon,
       [2] = difficulty,
       [3] = 0,
       [4] = false,
       [5] = false,
       [6] = false
   }
   
   ReplicatedStorage:WaitForChild("remotes"):WaitForChild("createLobby"):InvokeServer(unpack(args))
   wait(1)
   ReplicatedStorage:WaitForChild("remotes"):WaitForChild("startDungeon"):FireServer()
end

local function mainLoop()
   while true do
       wait(0.1)
       
       local currentLevel = getCurrentLevel()
       local currentPlaceID = game.PlaceId
       local currentDungeon, currentDifficulty = getDungeonAndDifficultyForLevel(currentLevel)
       
       if currentPlaceID == desiredPlaceID then
           saveCurrentLevel(currentLevel)
           saveCurrentDungeon(currentDungeon)
           saveCurrentDifficulty(currentDifficulty)
           createDungeon(currentDungeon, currentDifficulty)
       else
           if shouldTeleportToLobby(currentLevel, currentDungeon, currentDifficulty) then
               TeleportService:Teleport(desiredPlaceID, player)
           end
       end
   end
end

spawn(function()
   while true do
       local success, error = pcall(mainLoop)
       if not success then
           error("Script stopped due to main loop error")
       end
   end
end)
